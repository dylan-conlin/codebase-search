#!/bin/bash

# Codebase Search Tool - Intelligent Code Search with Sensible Defaults
# Makes searching codebases intuitive and powerful
# Works seamlessly from Claude Code interactive sessions

# Colors for better readability
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
DIM='\033[2m'
NC='\033[0m' # No Color

# Default values
CONTEXT_LINES=2
MAX_RESULTS=50
CASE_SENSITIVE=false
REGEX_MODE=false
FILE_PATTERN=""
EXCLUDE_PATTERN=""
SHOW_STATS=true

# Help function
show_help() {
    echo -e "${BOLD}üîç Codebase Search - Intelligent Code Search${NC}"
    echo ""
    echo "Usage: codebase-search [options] <search-term>"
    echo ""
    echo -e "${BOLD}Examples:${NC}"
    echo "  codebase-search useState                    # Find all useState occurrences"
    echo "  codebase-search -t tsx useState             # Search only in .tsx files"
    echo "  codebase-search -i TODO                     # Case-insensitive search"
    echo "  codebase-search -C 5 'function.*export'     # Regex with 5 context lines"
    echo "  codebase-search -e test calculatePrice      # Exclude test files"
    echo ""
    echo -e "${BOLD}Options:${NC}"
    echo "  -t, --type <ext>     Search only in files with this extension (js, tsx, py, etc.)"
    echo "  -f, --files <pattern> Search only in files matching pattern (glob)"
    echo "  -e, --exclude <pattern> Exclude files/dirs matching pattern"
    echo "  -i, --ignore-case    Case insensitive search"
    echo "  -r, --regex          Use regex pattern (default: literal string)"
    echo "  -C, --context <n>    Show n lines of context (default: 2)"
    echo "  -m, --max <n>        Maximum results to show (default: 50)"
    echo "  -l, --files-only     Show only filenames (no content)"
    echo "  -n, --no-stats       Don't show search statistics"
    echo "  -h, --help           Show this help"
    echo ""
    echo -e "${BOLD}Common Patterns:${NC}"
    echo "  Function definitions:  codebase-search -r 'function\\s+\\w+'"
    echo "  Class definitions:     codebase-search -r 'class\\s+\\w+'"
    echo "  Imports from module:   codebase-search 'from react'"
    echo "  TODO/FIXME comments:   codebase-search -i 'todo\\|fixme'"
    echo "  Hook usage:           codebase-search -t tsx 'use[A-Z]\\w+'"
    exit 0
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -t|--type)
            FILE_PATTERN="*.$2"
            shift 2
            ;;
        -f|--files)
            FILE_PATTERN="$2"
            shift 2
            ;;
        -e|--exclude)
            EXCLUDE_PATTERN="$2"
            shift 2
            ;;
        -i|--ignore-case)
            CASE_SENSITIVE=false
            shift
            ;;
        -r|--regex)
            REGEX_MODE=true
            shift
            ;;
        -C|--context)
            CONTEXT_LINES="$2"
            shift 2
            ;;
        -m|--max)
            MAX_RESULTS="$2"
            shift 2
            ;;
        -l|--files-only)
            FILES_ONLY=true
            shift
            ;;
        -n|--no-stats)
            SHOW_STATS=false
            shift
            ;;
        -h|--help)
            show_help
            ;;
        *)
            SEARCH_TERM="$1"
            shift
            ;;
    esac
done

# Check if search term provided
if [ -z "$SEARCH_TERM" ]; then
    echo -e "${RED}‚ùå Error: No search term provided${NC}"
    echo ""
    show_help
fi

# Build ripgrep command
RG_CMD="rg"

# Add case sensitivity
if [ "$CASE_SENSITIVE" = false ]; then
    RG_CMD="$RG_CMD -i"
fi

# Add regex mode (ripgrep uses regex by default, -F for literal)
if [ "$REGEX_MODE" = false ]; then
    RG_CMD="$RG_CMD -F"
fi

# Add context lines
if [ -n "$CONTEXT_LINES" ] && [ "$FILES_ONLY" != true ]; then
    RG_CMD="$RG_CMD -C $CONTEXT_LINES"
fi

# Add file pattern
if [ -n "$FILE_PATTERN" ]; then
    RG_CMD="$RG_CMD -g '$FILE_PATTERN'"
fi

# Add common exclusions (can be overridden)
DEFAULT_EXCLUDES=(
    "!.git/"
    "!node_modules/"
    "!.next/"
    "!dist/"
    "!build/"
    "!coverage/"
    "!*.min.js"
    "!*.map"
    "!package-lock.json"
    "!yarn.lock"
    "!.DS_Store"
)

for exclude in "${DEFAULT_EXCLUDES[@]}"; do
    RG_CMD="$RG_CMD -g '$exclude'"
done

# Add user exclusions
if [ -n "$EXCLUDE_PATTERN" ]; then
    RG_CMD="$RG_CMD -g '!$EXCLUDE_PATTERN'"
fi

# Add color and formatting
RG_CMD="$RG_CMD --color=always --heading --line-number"

# Files only mode
if [ "$FILES_ONLY" = true ]; then
    RG_CMD="$RG_CMD -l"
fi

# Add the search term
RG_CMD="$RG_CMD '$SEARCH_TERM'"

# Show search header
echo -e "${BOLD}üîç Searching for: ${CYAN}$SEARCH_TERM${NC}"
if [ "$REGEX_MODE" = true ]; then
    echo -e "   Mode: ${YELLOW}regex${NC}"
else
    echo -e "   Mode: ${GREEN}literal${NC}"
fi
if [ "$CASE_SENSITIVE" = false ]; then
    echo -e "   Case: ${GREEN}insensitive${NC}"
fi
if [ -n "$FILE_PATTERN" ]; then
    echo -e "   Files: ${BLUE}$FILE_PATTERN${NC}"
fi
if [ -n "$EXCLUDE_PATTERN" ]; then
    echo -e "   Excluding: ${RED}$EXCLUDE_PATTERN${NC}"
fi
echo ""

# Create temp file for results
TEMP_FILE=$(mktemp)

# Execute search and capture results
eval "$RG_CMD" > "$TEMP_FILE" 2>&1

# Check if ripgrep found anything
if [ $? -eq 0 ]; then
    # Count results
    if [ "$FILES_ONLY" = true ]; then
        RESULT_COUNT=$(wc -l < "$TEMP_FILE" | tr -d ' ')
        FILE_COUNT=$RESULT_COUNT
    else
        # Count unique files and total matches
        FILE_COUNT=$(grep -E "^[^:]+$" "$TEMP_FILE" | sort -u | wc -l | tr -d ' ')
        # Count lines that have line numbers (actual matches)
        MATCH_COUNT=$(grep -E "^[0-9]+[-:]" "$TEMP_FILE" | wc -l | tr -d ' ')
    fi
    
    # Show results (limited by MAX_RESULTS)
    if [ "$FILES_ONLY" = true ]; then
        head -n "$MAX_RESULTS" "$TEMP_FILE"
    else
        # Use awk to count displayed matches and stop at MAX_RESULTS
        awk -v max="$MAX_RESULTS" '
            BEGIN { count = 0 }
            /^[^:]+$/ { 
                # File header
                if (count >= max) exit
                print
                next
            }
            /^[0-9]+[-:]/ {
                # Match line
                if (/^[0-9]+:/) count++
                if (count > max) exit
                print
                next
            }
            {
                # Context line or other
                if (count <= max) print
            }
        ' "$TEMP_FILE"
    fi
    
    # Show statistics
    if [ "$SHOW_STATS" = true ]; then
        echo ""
        echo -e "${BOLD}üìä Search Statistics${NC}"
        if [ "$FILES_ONLY" = true ]; then
            echo -e "   Files found: ${GREEN}$FILE_COUNT${NC}"
            if [ "$FILE_COUNT" -gt "$MAX_RESULTS" ]; then
                echo -e "   ${YELLOW}(Showing first $MAX_RESULTS files)${NC}"
            fi
        else
            echo -e "   Matches: ${GREEN}$MATCH_COUNT${NC}"
            echo -e "   Files: ${BLUE}$FILE_COUNT${NC}"
            if [ "$MATCH_COUNT" -gt "$MAX_RESULTS" ]; then
                echo -e "   ${YELLOW}(Showing first $MAX_RESULTS matches)${NC}"
            fi
        fi
    fi
else
    # No results found
    echo -e "${YELLOW}No matches found${NC}"
    
    # Provide helpful suggestions
    echo ""
    echo -e "${BOLD}üí° Suggestions:${NC}"
    if [ "$CASE_SENSITIVE" = true ]; then
        echo "   ‚Ä¢ Try case-insensitive search with -i"
    fi
    if [ "$REGEX_MODE" = false ]; then
        echo "   ‚Ä¢ Try regex mode with -r for pattern matching"
    fi
    if [ -n "$FILE_PATTERN" ]; then
        echo "   ‚Ä¢ Try broadening file pattern or removing -t filter"
    fi
    if [ -n "$EXCLUDE_PATTERN" ]; then
        echo "   ‚Ä¢ Check if your exclusion pattern is too broad"
    fi
    echo "   ‚Ä¢ Use 'codebase-search -h' for more options"
fi

# Cleanup
rm -f "$TEMP_FILE"